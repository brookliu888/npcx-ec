/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_LNV_SYSTEM_H
#define Z_INCLUDE_SYSCALLS_LNV_SYSTEM_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_lnv_system_get_reset_cause(const struct device * dev);

__pinned_func
static inline int lnv_system_get_reset_cause(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_LNV_SYSTEM_GET_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_lnv_system_get_reset_cause(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define lnv_system_get_reset_cause(dev) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_LNV_SYSTEM_GET_RESET_CAUSE, lnv_system_get_reset_cause, dev); 	syscall__retval = lnv_system_get_reset_cause(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_LNV_SYSTEM_GET_RESET_CAUSE, lnv_system_get_reset_cause, dev, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_lnv_system_soc_reset(const struct device * dev);

__pinned_func
static inline int lnv_system_soc_reset(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_LNV_SYSTEM_SOC_RESET);
	}
#endif
	compiler_barrier();
	return z_impl_lnv_system_soc_reset(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define lnv_system_soc_reset(dev) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_LNV_SYSTEM_SOC_RESET, lnv_system_soc_reset, dev); 	syscall__retval = lnv_system_soc_reset(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_LNV_SYSTEM_SOC_RESET, lnv_system_soc_reset, dev, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_lnv_system_hibernate(const struct device * dev, uint32_t seconds, uint32_t milenovoeconds);

__pinned_func
static inline int lnv_system_hibernate(const struct device * dev, uint32_t seconds, uint32_t milenovoeconds)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; uint32_t val; } parm1 = { .val = seconds };
		union { uintptr_t x; uint32_t val; } parm2 = { .val = milenovoeconds };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_LNV_SYSTEM_HIBERNATE);
	}
#endif
	compiler_barrier();
	return z_impl_lnv_system_hibernate(dev, seconds, milenovoeconds);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define lnv_system_hibernate(dev, seconds, milenovoeconds) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_LNV_SYSTEM_HIBERNATE, lnv_system_hibernate, dev, seconds, milenovoeconds); 	syscall__retval = lnv_system_hibernate(dev, seconds, milenovoeconds); 	sys_port_trace_syscall_exit(K_SYSCALL_LNV_SYSTEM_HIBERNATE, lnv_system_hibernate, dev, seconds, milenovoeconds, syscall__retval); 	syscall__retval; })
#endif
#endif


extern const char * z_impl_lnv_system_chip_name(const struct device * dev);

__pinned_func
static inline const char * lnv_system_chip_name(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (const char *) arch_syscall_invoke1(parm0.x, K_SYSCALL_LNV_SYSTEM_CHIP_NAME);
	}
#endif
	compiler_barrier();
	return z_impl_lnv_system_chip_name(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define lnv_system_chip_name(dev) ({ 	const char * syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_LNV_SYSTEM_CHIP_NAME, lnv_system_chip_name, dev); 	syscall__retval = lnv_system_chip_name(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_LNV_SYSTEM_CHIP_NAME, lnv_system_chip_name, dev, syscall__retval); 	syscall__retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
